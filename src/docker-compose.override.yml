version: '3.8'

services:
  #database section
  
  #productdb: mysql
  productdb:
    container_name: productdb
    environment:
      MYSQL_ROOT_PASSWORD: "Passw0rd!"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
  
  #customerdb: postgres
  customerdb:
    container_name: customerdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=CustomerDb
    restart: always
    # port 5433 map from 5432
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  #basketdb: redis
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
  
  #orderdb: sql server
  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - sqlserver_data:/var/opt/mssql
    ports:
      - "1435:1433"
        
  #inventorydb: mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
  
  hangfiredb:
    container_name: hangfiredb
    ports:
      - '27018:27017'
    volumes:
      - hangfire_mongo_data:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'admin'
      MONGO_INITDB_ROOT_PASSWORD: 'admin'
  
  #infrastructure section
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@gmail.com.vn
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
  
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    hostname: rabbitmq
  
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      #      - ELASTIC_USERNAME=elastic #default username
      - ELASTIC_PASSWORD=admin
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=admin
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
  
  #microservices api sections
  product.api:
    container_name: product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=productdb;Port=3306;Database=ProductDb;Uid=root;Pwd=Passw0rd!"
      - "ApiConfiguration:ApiBaseUrl=http://product.api"
      - "ApiConfiguration:IdentityServerBaseUrl=http://localhost:6001"
      - "ApiConfiguration:IssuerUri=http://identity.api"
    depends_on:
      - productdb
    ports:
      - "6002:80"
    restart: always
  
  customer.api:
    container_name: customer.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "DatabaseSettings:ConnectionString=Server=customerdb;Port=5432;Database=CustomerDb;User Id=admin;Password=admin1234"
      - "HangFireSettings:Storage:ConnectionString=Server=customerdb;Port=5432;Database=CustomerDb;User Id=admin;Password=admin1234"
    depends_on:
      - customerdb
    ports:
      - "6003:80"
    restart: always
  
  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings:ConnectionString=basketdb:6379"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "GrpcSettings:StockUrl=http://inventory.grpc"
      - BackgroundJobSettings:HangfireUrl=http://hangfire.api
      - BackgroundJobSettings:CheckoutUrl=http://localhost:6001
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "6004:80"
    restart: always
  
  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=orderdb;Database=OrderDb;User Id=sa;Password=Passw0rd!;Multipleactiveresultsets=true;TrustServerCertificate=True"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "6005:80"
    restart: always
    
  inventory.api:
    container_name: inventory.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "MongoDbSettings:ConnectionString=mongodb://inventorydb"
      - "MongoDbSettings:DatabaseName=InventoryDb"
    depends_on:
      - inventorydb
    ports:
      - "6006:80"
    restart: always
    
  inventory.grpc:
    container_name: inventory.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
      - "MongoDbSettings:ConnectionString=mongodb://inventorydb"
      - "MongoDbSettings:DatabaseName=InventoryDb"
    depends_on:
      - inventorydb
    ports:
      - "6007:80"
    restart: always
    
  apigw.ocelot:
    container_name: apigw.ocelot
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
      - GlobalConfiguration:BaseUrl=http://apigw.ocelot
    depends_on:
      - customer.api
      - basket.api
      - product.api
      - ordering.api
      - inventory.api
    ports:
      - "6001:80"
    restart: always

  hangfire.api:
    container_name: hangfire.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "HangFireSettings:Storage:ConnectionString=mongodb://admin:admin@hangfiredb/hangfire-webapi?authSource=admin"
    depends_on:
      - hangfiredb
    ports:
      - "6008:80"
    restart: always
    
  webstatus:
    container_name: webstatus
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - HealthChecksUI__HealthChecks__0__Name=Product Health Check
      - HealthChecksUI__HealthChecks__0__Uri=http://product.api/hc
      - HealthChecksUI__HealthChecks__1__Name=Customer Health Check
      - HealthChecksUI__HealthChecks__1__Uri=http://customer.api/hc
      - HealthChecksUI__HealthChecks__2__Name=Basket Health Check
      - HealthChecksUI__HealthChecks__2__Uri=http://basket.api/hc
      - HealthChecksUI__HealthChecks__3__Name=Ordering Health Check
      - HealthChecksUI__HealthChecks__3__Uri=http://ordering.api/hc
      - HealthChecksUI__HealthChecks__4__Name=Inventory Health Check
      - HealthChecksUI__HealthChecks__4__Uri=http://inventory.product.api/hc
      - HealthChecksUI__HealthChecks__5__Name=Scheduled Job Health Check
      - HealthChecksUI__HealthChecks__5__Uri=http://hangfire.api/hc
      - HealthChecksUI__HealthChecks__6__Name=Identity Health Check
      - HealthChecksUI__HealthChecks__6__Uri=http://identity.api/hc
    ports:
      - "6010:80"